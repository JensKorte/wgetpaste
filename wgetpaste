#!/bin/bash
# A Script that automates pasting to a number of pastebin services
# relying only on bash v3, sed, coreutils (mktemp/sort/wc/whoami) and wget
# Author: Bo Ã˜rsted Andresen, bo.andresen@zlin.dk
##########################################################################

VERSION="2"

### helper functions

# show an error message and die
die() {
	echo "$*" 1>&2
	exit 1
}

# show that an option ${1} is not supported, run function that shows valid options ${3} and die
fail() {
	if [[ "${2}" == "service" ]]; then
		echo "\"$1\" is not a supported $2." 1>&2
	else
		echo "\"$1\" is not a supported $2 for ${SERVICE}: $(get_recipient)." 1>&2
	fi
	echo 1>&2
	${3} 1>&2
	exit 1
}

# escape % (used for escaping), & (used as separator in POST data), + (used as space in POST data) and space
escape() {
	echo "$*" | sed -e 's|%|%25|g' -e 's|&|%26|g' -e 's|+|%2b|g' -e 's| |+|g'
}	

show_url() {
	# add_to_clipboard() may be defined in /etc/wgetpaste or ~/.wgetpaste and can be used to add
	# ${URL} to your clipboard using xclip, xcut, klipper or whatever your window manager provides
	# for that task.
	[[ "$(type -t add_to_clipboard)" == "function" ]] && add_to_clipboard "${1}"

	echo "Your ${2}paste can be seen here: ${1}"
}

### defaults

# The following defaults can be overridden in either /etc/wgetpaste or ~/.wgetpaste.
# Only those four variables should be set in those files.
#
# If add_to_clipboard() is defined as a function in one of those files it will be called with
# the url where your paste can be seen as an argument. You may use xclip, xcut, klipper or
# whatever your window manager provides for adding it to your clipboard.
#
# Likewise if get_from_clipboard() is defined as a funciont in one of those files it will be
# called to retrieve input from your clipboard when --xcut is used.
[[ -f /etc/wgetpaste ]] && . /etc/wgetpaste
[[ -f ~/.wgetpaste ]] && . ~/.wgetpaste
DEFAULT_NICK="${DEFAULT_NICK:-$(whoami)}"
DEFAULT_SERVICE="${DEFAULT_SERVICE:-rafb}"
DEFAULT_LANGUAGE="${DEFAULT_LANGUAGE:-Plain Text}"
DEFAULT_EXPIRATION="${DEFAULT_EXPIRATION:-1 week}"
# setting DEFAULT_EXPIRATION_${SERVICE} can be used to override for services where the general
# default is unavailable.
DEFAULT_EXPIRATION_stgraber="${DEFAULT_EXPIRATION_stgraber:-1 month}"

### usage

show_usage() {
	echo "Usage: $0 [options] [file]"
	echo
	echo "Options:"
	echo "    -l, --language LANG           set language (defaults to \"${DEFAULT_LANGUAGE}\")"
	echo "    -d, --description DESCRIPTION set description (defaults to \"stdin\" or filename)"
	echo "    -n, --nick NICK               set nick (defaults to your username))"
	echo "    -s, --service SERVICE         set service to use (defaults to \"${DEFAULT_SERVICE}\")"
	echo "    -e, --expiration EXPIRATION   set when it should expire (defaults to \"${DEFAULT_EXPIRATION}\""
	echo
	echo "    -S, --list-services           list supported pastebin services"
	echo "    -L, --list-languages          list languages supported by the specified service"
	echo "    -E, --list-expiration         list expiration setting supported by the specified service"
	echo
	echo "    -r, --raw                     show url for the raw paste (no syntax highlighting or html)"
	echo "    -x, --xcut                    read input from clipboard (requires configuration)"
	echo
	echo "    -v, --verbose                 show wget stderr output if no url is received"
	echo "        --debug                   be *very* verbose (implies -v)"
	echo
	echo "    -h, --help                    show this help"
	echo "        --version                 show version information"
	echo
	echo "Defaults can be overridden globally in /etc/wgetpaste or per user in ~/.wgetpaste."
	echo "DEFAULT_{NICK,SERVICE,LANGUAGE,EXPIRATION} may be set in those files. Also"
	echo "DEFAULT_EXPIRATION_\${SERVICE} may be set to get different default expiration for"
	echo "different services."
	echo "Further the functions add_to_clipboard() and get_from_clipboard() may be defined there."
	echo "Type wgetpaste --xcut for an example."
}

### services

SERVICES=(ca rafb sh stgraber)
SERVICE_URLS=(http://pastebin.ca http://rafb.net/paste/ http://sh.nu/p/ http://paste.stgraber.org)
SERVICE_URLS_RAW=(http://pastebin.ca http://rafb.net/paste/paste.php http://sh.nu/p/ http://paste.stgraber.org)
# 4 (base indentation) + max service length + 2 (space + dash)
INDENTATION=14

show_services() {
	echo 'Services supported (case sensitive):'
	for index in ${!SERVICES[*]}; do
		echo "    ${SERVICES[index]} "$'\e'"[${INDENTATION}G- ${SERVICE_URLS[index]}"
	done
}

verify_service() {
	for index in ${!SERVICES[*]}; do
		[[ "$*" == "${SERVICES[index]}" ]] && return 0
	done
	fail "$*" "service" "show_services"
}

### languages

# rafb
rafb_LANGUAGES=(C C89 C99 C++ C\# Java Pascal Perl PHP PL\/I Python Ruby SQL VB Plain\ Text)
# ca - ordering is important here as their value is set as their number in the order
ca_LANGUAGES=(Plain\ Text Asterisk\ Configuration C C++ PHP Perl Java VB C\# Ruby \
Python Pascal mIRC PL/I XML SQL Scheme ActionScript Ada 	\
Apache\ Configuration Assembly\ \(NASM\) ASP Bash CSS Delphi HTML\ 6\.0\ Strict JavaScript \
LISP Lua Microprocessor\ ASM Objective\ C VB\.NET)
# stgraber - ordering for languages and values must be the same
stgraber_LANGUAGES=(Plain\ Text ActionScript Ada Apache\ Log\ File AppleScript \
Assembly\ \(NASM\) ASP Bash C C\ for\ Macs CAD\ DCL CAD\ Lisp C++ C\# ColdFusion CSS D Delphi \
Diff DOS Eiffel Fortran FreeBasic Game\ Maker HTML INI\ file Java Javascript Lisp Lua MatLab \
Microprocessor\ ASM MySQL NullSoft\ Installer Objective\ C OCaml Openoffice\.org\ BASIC \
Oracle\ 8 Pascal Perl PHP Python QBasic\/QuickBASIC Robots Ruby Scheme Smarty SQL TCL VB \
VB\.NET VisualFoxPro XML)
stgraber_LANGUAGE_VALUES=(text actionscript ada apache applescript asm asp bash c c\_mac caddcl cadlisp \
cpp csharp cfm css d delphi diff dos eiffel fortran freebasic gml html4strict ini java \
javascript lisp lua matlab mpasm mysql nsis objc ocaml oobas oracle8 pascal perl php python \
qbasic robots ruby scheme smarty sql tcl vb vbnet visualfoxpro xml)

show_languages() {
	echo "Languages supported by ${SERVICE}: $(get_recipient) (case sensitive):"
	case "${SERVICE}" in
		ca | rafb | stgraber )
		for index in $(eval "echo \${!${SERVICE}_LANGUAGES[*]}"); do
			echo "    $(eval "echo \${${SERVICE}_LANGUAGES[index]}")"
		done | sort
		;;
		* )
		echo 1>&2
		echo "\"${SERVICE}\" has no support for any specific languages." 1>&2
	esac
}

# this is in place because rafb.net (probably others too) rejects any paste with an invalid language
verify_language() {
	case "${SERVICE}" in
		ca )
		let "i = 0"
		for index in ${!ca_LANGUAGES[*]}; do
			let "i = i +1"
			[[ "${LANGUAGE}" == "${ca_LANGUAGES[index]}" ]] && LANGUAGE="${i}" && return 0
		done
		;;
		rafb )
		for index in ${!rafb_LANGUAGES[*]}; do
			[[ "${LANGUAGE}" == "${rafb_LANGUAGES[index]}" ]] && return 0
		done
		;;
		stgraber )
		for index in ${!stgraber_LANGUAGES[*]}; do
			[[ "${LANGUAGE}" == "${stgraber_LANGUAGES[index]}" ]] && LANGUAGE="${stgraber_LANGUAGE_VALUES[index]}" && return 0
		done
		;;
		* )
		[[ ! ${LANGUAGE_SET} ]] && return 0
		;;
	esac
	fail "${LANGUAGE}" "language" "show_languages"
}

### expiration

# ca
ca_EXPIRATION_OPTIONS=(Never 5\ minutes 10\ minutes 15\ minutes 30\ minutes 45\ minutes 1\ hour \
2\ hours 4\ hours 8\ hours 12\ hours 1\ day 2\ days 3\ days 1\ week 2\ weeks 3\ weeks 1\ month \
2\ months 3\ months 4\ months 5\ months 6\ months 1\ year)
# stgraber - ordering for options and values must be the same
stgraber_EXPIRATION_OPTIONS=(Never 1\ day 1\ month)
stgraber_EXPIRATION_VALUES=(f d m)

show_expiration_options() {
	echo "Expiration options supported by ${SERVICE}: $(get_recipient) (case sensisitive):"
	case "${SERVICE}" in
		ca | stgraber )
		for index in $(eval "echo \${!${SERVICE}_EXPIRATION_OPTIONS[*]}"); do
			echo "    $(eval "echo \${${SERVICE}_EXPIRATION_OPTIONS[index]}")"
		done
		;;
		rafb )
		echo 1>&2
		echo "Pastes on ${SERVICE}: $(get_recipient) expires after 24 hours." 1>&2
		echo "${SERVICE} has no suppport for setting expiration." 1>&2
		;;
		* )
		echo 1>&2
		echo "${SERVICE} has no suppport for setting expiration." 1>&2
		;;
	esac
}

verify_expiration_options() {
	case "${SERVICE}" in
		ca )
		for index in ${!ca_EXPIRATION_OPTIONS[*]}; do
			[[ "${EXPIRATION}" == "${ca_EXPIRATION_OPTIONS[index]}" ]] && return 0
		done
		;;
		stgraber )
		for index in ${!stgraber_EXPIRATION_OPTIONS[*]}; do
			[[ "${EXPIRATION}" == "${stgraber_EXPIRATION_OPTIONS[index]}" ]] && EXPIRATION="${stgraber_EXPIRATION_VALUES[index]}" && return 0
		done
		;;
		* )
		[[ ! ${EXPIRATION_SET} ]] && return 0 
		;;
	esac
	fail "${EXPIRATION}" "expiration option" "show_expiration_options"
}

### Posting helper functions

# get the url to post to for any given service
get_recipient() {
	if [[ "${1}" == "raw" ]]; then
		for index in ${!SERVICES[*]}; do
			[[ "${SERVICE}" == "${SERVICES[index]}" ]] && echo "${SERVICE_URLS_RAW[index]}" && return 0
		done
	else
		for index in ${!SERVICES[*]}; do
			[[ "${SERVICE}" == "${SERVICES[index]}" ]] && echo "${SERVICE_URLS[index]}" && return 0
		done
	fi
	echo "Failed to get url for \"${SERVICE}\"." 1>&2
	exit 1
}

# print a warning if failure is predictable due to the mere size of the paste. sh seems to be the most reliable
# service in that regard. for now no warning will be printed for that. note that this is only a warning printed.
# it doesn't abort or anything.
warn_size() {
	print_warning() {
		echo "Pasting > ${1} often tend to fail with ${SERVICE}. Use --verbose or --debug to see the"
		echo "error output from wget if it fails. Alternatively use another pastebin service like e.g. sh."
	}

	case "${SERVICE}" in
		rafb | stgraber )
		[[ ${SIZE} -gt 512000 ]] && print_warning "512 kb"
		;;
		ca )
		[[ ${SIZE} -gt 1024000 ]] && print_warning "1 MB"
		;;
	esac
}

# POST data
post_data() {
	case "${SERVICE}" in
		ca )
		echo "name=${NICK}&type=${LANGUAGE}&description=${DESCRIPTION}&expiry=${EXPIRATION}&s=Submit+Post&content=${INPUT}"
		;;
		rafb )
		echo "nick=${NICK}&lang=${LANGUAGE}&desc=${DESCRIPTION}&cvt_tabs=${CVT_TABS}&text=${INPUT}"
		;;
		sh )
		echo "poster=${NICK}&code=${INPUT}"
		;;
		stgraber )
		echo "poster=${NICK}&format=${LANGUAGE}&title=${DESCRIPTION}&expiry=${EXPIRATION}&paste=Send&code2=${INPUT}"
		;;
		* )
		echo "\"${SERVICE}\" is not supported by ${FUNCNAME}()." 1>&2
		exit 1
		;;
	esac
}

# indicate if ${SERVICE} needs stdout output from wget to get the resulting url
need_stdout() {
	case "${SERVICE}" in
		# this service needs to use a regex to retrieve the url from stdout
		ca )
		return 0
		;;
		# these services read the reply from Location: which goes to stderr
		rafb | sh | stgraber )
		return 1
		;;
		* )
		echo "\"${SERVICE}\" is not supported by ${FUNCNAME}()." 1>&2
		exit 1
		;;
	esac
}

# get the url
get_url() {
	case "${SERVICE}" in
		ca )
		echo "$*" | sed -n 's|^.*content="[0-9]*;\(http://pastebin.ca/[0-9]*\)".*$|\1|p'
		;;
		rafb | sh | stgraber )
		echo "$*" | sed -n 's|^.*Location:\ \(http://[^\ ]\+\).*$|\1|p'
		;;
		* )
		echo "\"${SERVICE}\" is not supported by ${FUNCNAME}()." 1>&2
		exit 1
		;;
	esac
}

# verify that the pastebin service didn't return a known error url such as toofast.html from rafb
verify_url() {
	case "${SERVICE}" in
		rafb )
		if [[ "${URL}" == "http://rafb.net/p/toofast.html" ]]; then
			echo "You must wait at least 10 seconds between each paste! Try again in 10 seconds." 1>&2
			exit 1
		fi
		;;
	esac
}

# if possible convert URL to raw
convert_to_raw() {
	case "${SERVICE}" in
		ca )
		RAW_URL="$(echo "${URL}" | sed -e 's|^\(http://pastebin.ca/\)\(.*\)$|\1raw/\2|')"
		;;
		rafb )
		RAW_URL="$(echo "${URL}" | sed -e 's|html\?$|txt|')"
		;;
		stgraber )
		RAW_URL="$(echo "${URL}" | sed -e 's|^\(http://paste.stgraber.org/\)\(.*\)$|\1download/\2|')"
		;;
		* )
		echo "Raw download of pastes is not supported by ${SERVICE}: $(get_recipient)." 1>&2
		return 1
		;;
	esac
	return 0
}

### read cli options

# if you know a better option (like getopts) which provides the same features
# please let me know how.
while [[ ! -z "${1}" ]]; do
	case "${1}" in
		--debug )
		DEBUG=true
		set -x
		shift
		;;
		--description=* )
		[[ -z "${1#*=}" ]] && show_usage 1>&2 && exit 1
		DESCRIPTION="$(escape "${1#*=}")"
		shift
		;;
		-d | --description )
		[[ -z "${2}" ]] && show_usage 1>&2 && exit 1
		DESCRIPTION="$(escape "${2}")"
		shift 2
		;;
		--expiration=* )
		[[ -z "${1#*=}" ]] && show_usage 1>&2 && exit 1
		EXPIRATION_SET=true
		EXPIRATION="${1#*=}"
		shift
		;;
		-e | --expiration )
		[[ -z "${2}" ]] && show_usage 1>&2 && exit 1
		EXPIRATION_SET=true
		EXPIRATION="${2}"
		shift 2
		;;
		-E | --list-expiration )
		LIST_EXPIRATION=true
		shift
		;;
		-h | --help )
		show_usage
		exit 0
		;;
		--language=* )
		[[ -z "${1#*=}" ]] && show_usage 1>&2 && exit 1
		LANGUAGE_SET=true
		LANGUAGE="${1#*=}"
		shift
		;;
		-l | --language )
		[[ -z "${2}" ]] && show_usage 1>&2 && exit 1
		LANGUAGE_SET=true
		LANGUAGE="${2}"
		shift 2
		;;
		-L | --list-languages )
		LIST_LANGUAGES=true
		shift
		;;
		--nick=* )
		[[ -z "${1#*=}" ]] && show_usage 1>&2 && exit 1
		NICK="$(escape "${1#*=}")"
		shift
		;;
		-n | --nick )
		[[ -z "${2}" ]] && show_usage 1>&2 && exit 1
		NICK="$(escape "${2}")"
		shift 2
		;;
		-r | --raw )
		RAW=true
		shift
		;;
		--service=* )
		[[ -z "${1#*=}" ]] && show_usage 1>&2 && exit 1
		verify_service "${1#*=}"
		SERVICE="$(escape "${1#*=}")"
		shift
		;;
		-s | --service )
		[[ -z "${2}" ]] && show_usage 1>&2 && exit 1
		verify_service "${2}"
		SERVICE="$(escape "${2}")"
		shift 2
		;;
		-S | --list-services )
		show_services
		exit 0
		;;
		-v | --verbose )
		VERBOSE=true
		shift
		;;
		--version )
		echo "$0, version ${VERSION}"
		exit 0
		;;
		-x | --xcut )
		XCUT=true
		SOURCE="xcut"
		shift
		;;
		*)
		if [[ -f "${1}" ]]; then
			SOURCE="${1}"
			shift
		else
			show_usage 1>&2
			exit 1
		fi
		;;
	esac
done

### everything below this should be independent of which service is being used...

# set default service, nick, source and tabs convertion
SERVICE="${SERVICE:-${DEFAULT_SERVICE}}"
NICK="${NICK:-$(escape "${DEFAULT_NICK}")}"
SOURCE="${SOURCE:-/dev/stdin}"
CVT_TABS="No"

# show languages if requested (needs to be done after the right service is selected)
[[ ${LIST_LANGUAGES} ]] && show_languages && exit 0

# show expiration options if requested (needs to be done after the right service is selected)
[[ ${LIST_EXPIRATION} ]] && show_expiration_options && exit 0

# language needs to be verified before it is escaped but after service is selected
LANGUAGE="${LANGUAGE:-${DEFAULT_LANGUAGE}}"
# uses ${SERVICE} and ${LANGUAGE}. may change the value of the latter.
verify_language
LANGUAGE="$(escape "${LANGUAGE}")"

# expiration needs to be verified before it is escaped but after service is selected
[[ -n "$(eval "echo \${DEFAULT_EXPIRATION_${SERVICE}}")" ]] && EXPIRATION="${EXPIRATION:-$(eval "echo \${DEFAULT_EXPIRATION_${SERVICE}}")}"
EXPIRATION="${EXPIRATION:-${DEFAULT_EXPIRATION}}"
# uses ${SERVICE} and ${EXPIRATION}. may change the value of the latter.
verify_expiration_options
EXPIRATION="$(escape "${EXPIRATION}")"

# set default description
if [[ -z "${DESCRIPTION}" ]]; then
	if [[ "${SOURCE}" == "/dev/stdin" ]]; then
		DESCRIPTION="stdin"
	else
		DESCRIPTION="$(escape "${SOURCE}")"
	fi
fi

# handle the case where the input source (defaulting to /dev/stdin) isn't readable verbosely
if [[ ! ${XCUT} ]] && [[ ! -r "${SOURCE}" ]]; then
	echo "The input source: \"${SOURCE}\" is not readable. Please specify a readable input source." 1>&2
	echo 1>&2
	show_usage 1>&2
	exit 1
fi

# read input
if [[ ${XCUT} ]]; then
	if [[ "$(type -t get_from_clipboard)" == "function" ]]; then
		INPUT="$(escape "$(get_from_clipboard)")"
	else
		echo "You need to define get_from_clipboard() in /etc/wgetpaste or ~/.wgetpaste to use --xcut." 1>&2
		echo "If you want to use e.g. xclip simply emerge xclip and define it like this:" 1>&2
		echo 1>&2
		echo -e "get_from_clipboard() {\n    xclip -o\n}\n" 1>&2
		echo "Likewise if you want the resulting url stored in your clipboard using e.g. xclip" 1>&2
		echo "define it like this:" 1>&2
		echo 1>&2
		echo -e "add_to_clipboard() {\n    xclip \"\$*\"\n}\n" 1>&2
		echo "Use whatever your window manager provides to alter your clipboard." 1>&2
		exit 1
	fi
else
	INPUT="$(escape "$( < "${SOURCE}" )")"
fi
[[ -z "${INPUT}" ]] && die "No input read. Nothing to paste. Aborting."

# print a friendly warning if the size makes failure predictable for the specified pastebin service.
SIZE=$(echo "${INPUT}" | wc -c)
warn_size 1>&2

# create temp file (wget is much more reliable reading large input from a file than from the cli directly
TEMPFILE="$(mktemp /tmp/wgetpaste.XXXXXX)"
[[ -f "${TEMPFILE}" ]] || die "Failed to create a temporary file." 1>&2

# write paste data to the temporary file
post_data > "${TEMPFILE}" || die "Failed to write to temporary file: \"${TEMPFILE}\"."

# set recipient
RECIPIENT="$(get_recipient "raw")"

# paste it
WGET_ARGS="--tries=5 --timeout=60 --post-file=${TEMPFILE}"
if ! need_stdout && [[ ! ${DEBUG} ]] && [[ -w /dev/null ]]; then
	OUTPUT="$(wget -O /dev/null ${WGET_ARGS} ${RECIPIENT} 2>&1)"
else
	OUTPUT="$(wget -O - ${WGET_ARGS} ${RECIPIENT} 2>&1)"
fi

# clean temporary file
if [[ ! ${DEBUG} ]]; then
	rm "${TEMPFILE}" || echo "Failed to remove temporary file: \"${TEMPFILE}\"." 1>&2
else
	echo "Left temporary file: \"${TEMPFILE}\" alone for debugging purposes."
fi

# get the url
URL="$(get_url "${OUTPUT}")"

# verify that the pastebin service didn't return a known error url such as toofast.html from rafb
# uses ${SERVICE} and ${URL}.
verify_url

# handle the case when there was no location returned
if [[ -z "${URL}" ]]; then
	if [[ ${DEBUG} ]] || [[ ${VERBOSE} ]]; then
		echo "Apparently nothing was received. Perhaps the connection failed." 1>&2
		echo "${OUTPUT}" 1>&2
	else
		echo "Apparently nothing was received. Perhaps the connection failed. Enable --verbose or" 1>&2
		echo "--debug to get the output from wget that can help diagnose it correctly." 1>&2
	fi
	exit 1
fi

# convert_to_raw() may change the value of RAW. Otherwise it set RAW_URL.
if [[ ${RAW} ]] && convert_to_raw; then
	show_url "${RAW_URL}" "raw "
else
	show_url "${URL}"
fi

exit 0
